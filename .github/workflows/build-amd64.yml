name: 构建 AMD64 平台可执行文件

# 触发条件：当推送标签或手动触发时执行
on:
  push:
    tags:
      - 'v*'  # 推送以v开头的标签时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  build-amd64:
    # 在Windows最新版本上运行，因为要生成exe文件
    runs-on: windows-latest
    name: 构建 Windows AMD64 可执行文件
    timeout-minutes: 60  # 设置超时时间为60分钟

    steps:
      # 第一步：检出代码仓库
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的git历史

      # 第二步：设置Go环境
      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'  # 使用Go 1.24版本
          cache: true  # 启用Go模块缓存

      # 第三步：设置Node.js环境
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # 使用Node.js 18版本
          cache: 'npm'  # 启用npm缓存
          cache-dependency-path: frontend/package-lock.json  # 指定缓存路径

      # 第四步：配置npm设置（提高下载稳定性）
      - name: 配置 npm 设置
        working-directory: ./frontend
        run: |
          # 设置npm镜像源
          npm config set registry https://registry.npmjs.org/
          # 设置重试次数和超时时间
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 120000
          npm config set timeout 300000
          npm config set maxsockets 50
          npm config set progress false

      # 第五步：清理npm缓存
      - name: 清理 npm 缓存
        working-directory: ./frontend
        run: npm cache clean --force

      # 第六步：安装前端依赖
      - name: 安装前端依赖
        working-directory: ./frontend
        run: |
          # 使用ci命令安装依赖，确保版本一致性
          npm ci --no-audit --no-fund --prefer-offline --verbose --loglevel=warn
        timeout-minutes: 30

      # 第七步：构建前端代码
      - name: 构建前端代码
        working-directory: ./frontend
        run: npm run build
        timeout-minutes: 20

      # 第八步：安装Wails CLI工具
      - name: 安装 Wails3 CLI
        run: |
          # 安装最新版本的Wails3 CLI
          go install -v github.com/wailsapp/wails/v3/cmd/wails3@latest
        timeout-minutes: 15

      # 第九步：构建应用程序
      - name: 构建应用程序
        run: |
          # 使用Wails构建Windows AMD64平台的可执行文件
          # -platform: 指定目标平台为windows_amd64
          # -clean: 清理之前的构建文件
          # -webview2 embed: 嵌入WebView2运行时
          wails3 task build 
        timeout-minutes: 25

      # 第十步：上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: exam-assistant-windows-amd64  # 产物名称
          path: build/bin/exam_assistant*  # 上传所有匹配的可执行文件
          retention-days: 30  # 保留30天

      # 第十一步：创建发布（可选，仅在推送标签时执行）
      - name: 创建 GitHub 发布
        if: startsWith(github.ref, 'refs/tags/')  # 仅在推送标签时执行
        uses: softprops/action-gh-release@v1
        with:
          files: exam-assistant-windows-amd64/*  # 上传到GitHub Release的文件
          draft: false  # 不创建草稿版本
          prerelease: false  # 不创建预发布版本
          generate_release_notes: true  # 自动生成发布说明
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub提供的token 